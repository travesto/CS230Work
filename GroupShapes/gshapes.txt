======Shape Groups======

The purpose of this assignment is to continue practice C++ class implementation of polymorphic types by expanding the interface and adding new polymorphic classes.

======Overview======

Extend your previous solution for Shapes by adding the new derived class Group. The group class is exactly what it sounds like&emdash;an object that is not a single shape, but a collection, or "group" of shapes. This class should inherit from Shape and provide the same interface.

======Construction======

The Group constructor takes a color, the number of shapes in the Group, and an array of Shape pointers to the actual group members. The Group should consider that it "owns" the member shapes; meaning it is responsible for destroying them. The color of the group determines the color of its individual members. See below for an example of typical usage.

======Interface======

Area and perimeter are the sum of the individual member shapes. Inside is true if the point is inside any member shape. Moving a shape effectively moves all the individual members. An example of the rendering format is shown below.

In addition to the inherited interface, Group should also have functions allowing the following code to work.

Shape * list[2];
list[0] = new Box(GREEN, 0, 1, 1, 0);
list[1] = new Circle(YELLOW, 2, 2, 2);
Group g(BLUE, 2, list);
	
cout << "Group area: " << g.area() << "\n";
cout << "Group perimeter: " << g.perimeter() << "\n";
	
g.move(1,1);
g.render(cout); cout << "\n";
g.color(RED);
g.render(cout); cout << "\n";

cout << "Count: " << g.shapes() << "\n";
g.shape(1)->render(cout); cout << "\n";

Shape * list2[3];
list2[0] = new Circle(WHITE,5,5,1);
list2[1] = new Box(GREEN,7,1,9,-10);
list2[2] = new RoundBox(BLACK,5,5,8.5,4.5,0.1);
g.shapes(3,list2);
g.render(cout); cout << "\n";
